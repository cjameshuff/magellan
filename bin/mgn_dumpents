#!/usr/bin/env ruby
# Dump entities in world. One parameter, world name.

require 'magellan'
require 'magellan/mcdefs'

include Magellan

if(ARGV.length < 1)
    puts "dumpents usage:"
    puts "\tmgn_dumpents WORLD"
    exit()
end

# Chunk format:
#    COMPOUND Level {
#        BYTE_ARRAY Blocks(32768)
#        BYTE_ARRAY Data(16384)
#        BYTE_ARRAY SkyLight(16384)
#        BYTE_ARRAY BlockLight(16384)
#        BYTE_ARRAY HeightMap(16384)
#        
#        TAG_LIST<COMPOUND> Entities
#        TAG_LIST<COMPOUND> TileEntities
#        
#        TAG_LONG LastUpdate
#        
#        TAG_INT xPos
#        TAG_INT zPos
#        
#        TAG_BYTE TerrainPopulated
#    }

def dump_entity(entity)
    id = entity[:id].value
    pos = entity[:Pos].value
    x = pos[0].value
    y = pos[1].value
    z = pos[2].value
    puts "\t#{id} at < #{x}, #{y}, #{z}>: #{entity.to_s}"
end

def dump_tile_entity(entity)
    id = entity[:id].value
    x = entity[:x].value
    y = entity[:y].value
    z = entity[:z].value
#    id = level[:EntityId].value # for MobSpawner
    puts "\t#{id} at < #{x}, #{y}, #{z}>: #{entity.to_s}"
end

def dump_chunk(fin, x, z, chunk)
    level = chunk[:Level]
    lastUpdate = level[:LastUpdate].value
    xPos = level[:xPos].value
    zPos = level[:zPos].value
    terrainPopulated = level[:TerrainPopulated].value
    
    entities = level[:Entities].value
    tileEntities = level[:TileEntities].value
    
    if(entities.size > 0 || tileEntities.size > 0)
        puts "Region #{fin} chunk #{x}, #{z}: x = #{xPos}, z = #{zPos}"
        puts "#{entities.length} movable entities, #{tileEntities.length} tile entities"
        if(entities.size > 0)
            puts "entities:"
            entities.each {|ent| dump_entity(ent)}
        end
        if(tileEntities.size > 0)
            puts "tileEntities:"
            tileEntities.each {|ent| dump_tile_entity(ent)}
        end
        true
    else
        false
    end
end


testworld = ARGV[0]

world_dir = "#{MCPATH}/saves/#{testworld}/region"

regionFiles = Dir.entries(world_dir)
if(regionFiles[0] == '.')
    regionFiles.shift
end
if(regionFiles[0] == '..')
    regionFiles.shift
end
puts regionFiles


chunkCoords = []
(0..31).each {|x|
    (0..31).each {|z| chunkCoords.push([x, z])}
}

regionFiles.each {|fin|
    region = MCRegion.new
    region.open("#{world_dir}/#{fin}")
    puts "#{world_dir}/#{fin}:"
    # region.printstats()
    chunks = []
    (0..31).each {|x|
        (0..31).each {|z|
            if(region.chunk_exists(x, z))
                chunks.push([x, z])
                print ' *'
            else
                print ' .'
            end
        }
        print "\n"
    }
    
    puts '#####################################################################'
    chunks.each {|chnk|
        chunk = region.read_chunk_nbt(chnk[0], chnk[1])
        if(dump_chunk(fin, chnk[0], chnk[1], chunk))
            puts '#####################################################################'
        end
    }
}


